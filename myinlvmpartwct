#!/usr/bin/env bash
#Where I found this script originally. I made my own changes that I wanted
# https://github.com/netson/ubuntu-unattended

#file names & paths
tmp="/tmp"  # destination folder to store the final iso file
currentuser="$( whoami)"

# define spinner function for slow tasks
# courtesy of http://fitnr.com/showing-a-bash-spinner.html
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# define download function
# courtesy of http://fitnr.com/showing-file-download-progress-using-wget.html
download()
{
    local url=$1
    echo -n "    "
    wget --progress=dot $url 2>&1 | grep --line-buffered "%" | \
        sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
    echo -ne "\b\b\b\b"
    echo " DONE"
}

# define function to check if program is installed
# courtesy of https://gist.github.com/JamieMason/4761049
function program_is_installed {
    # set to 1 initially
    local return_=1
    # set to 0 if not found
    type $1 >/dev/null 2>&1 || { local return_=0; }
    # return value
    echo $return_
}

# print a pretty header
echo
echo " +---------------------------------------------------+"
echo " |     UNATTENDED UBUNTU or Custom ISO MAKER         |"
echo " +---------------------------------------------------+"
echo

# ask if script runs without sudo or root priveleges
if [ $currentuser != "root" ]; then
    echo " This script needs to be run as root user"
    exit 1
fi

# ask whether to include vmware tools or not
while true; do
    echo " which ubuntu edition would you like to remaster:"
    echo
    echo "  [1] Ubuntu 16.04.2 LTS Server amd64 - Xenial Xerus"
    echo "  [2] Choose your own iso file with the absolte path"
    echo
    read -p " please enter your preference: [1|2]: " ubver
    case $ubver in
        [1]* )  download_file="ubuntu-16.04.2-server-amd64.iso"
                download_location="http://releases.ubuntu.com/16.04/"
                new_iso_name="ubuntu-16.04.2-server-amd64-unattended.iso"
                break;;
	[2]* )  read -p "Please give me your absolute path for your iso:" isop
		iso=$(basename $isop)
		echo ""Please give me the name of what you want your iso to be.
		read -p "Do not forget the .iso:" ison
		download_file=$iso
		download_location="There will not be a location"
		new_iso_name=$ison
		if [[ ! -f $tmp/$download_file ]]; then
    		echo " copying $download_file "
    		cp -r $isop $tmp
		fi
		break;;
        * ) echo " please answer [1] or [2]";;
    esac
done

if [ -f /etc/timezone ]; then
  timezone=`cat /etc/timezone`
elif [ -h /etc/localtime]; then
  timezone=`readlink /etc/localtime | sed "s/\/usr\/share\/zoneinfo\///"`
else
  checksum=`md5sum /etc/localtime | cut -d' ' -f1`
  timezone=`find /usr/share/zoneinfo/ -type f -exec md5sum {} \; | grep "^$checksum" | sed "s/.*\/usr\/share\/zoneinfo\///" | head -n 1`
fi

# ask the user questions about his/her preferences
read -ep " please enter your preferred timezone: " -i "${timezone}" timezone
read -ep " please enter your preferred username: " -i "jeff" username
read -ep " please enter your preferred hostname: " -i "ubuntu" hostname
read -ep " please enter your preferred domain-name: " -i "mydomain.com" domain
read -sp " please enter your preferred password: " upassword
printf "\n"
read -sp " confirm your preferred password: " upassword2
printf "\n"
# check if the passwords match to prevent headaches
if [[ "$upassword" != "$upassword2" ]]; then
    echo " your passwords do not match; please restart the script and try again"
    echo
    exit
fi

read -ep " Make ISO bootable via USB: " -i "yes" bootable
read -ep " Would you like to make a bootable disk with dd: " -i "yes" usedd
if [[ $usedd == "yes" ]] || [[ $usedd == "y" ]]; then
  echo " You available devices are:"
  ls /dev | grep "sd"
  echo " Please use full disk name ie /dev/sdc without partition"
  read -p "What disk would you like to use:" disk
fi
echo 
#answers for installing applications
read -ep "Would you like to install appications with this iso:" -i "yes" inap
if [[ $inap == "yes" ]] || [[ $inap == "y" ]]; then
read -p "How many applications would you like to install in this iso:" ct
while [[ $ct -gt 0 ]]
do
echo " Please give me the application name as typed in apt-get"
sleep 1
read -p " Give me one application at a time with no space as such:nmap-->" ap$ct
ct=$(($ct-1))
done
fi
apfl="d-i preseed/late_command string apt-install $ap15 $ap14 $ap13 $ap12 $ap11 $ap10 $ap9 $ap8 $ap7 $ap6 $ap5 $ap4 $ap3 $ap2 $ap1"
echo $apfl
read -ep "Would you like to set up your own network config and not use DHCP?" -i "no" dhcp
if [[ $dhcp == "yes" ]] || [[ $dhcp == "y" ]]; then
read -p "What would you like your ip to be--->" ipaddr
read -p "What would you like your subnet mask to be ie 255.255.255.0--->" mask
read -p "What would you like your default gateway to be --->" gateway
read -p "What would you like your DNS to be--->" dns
fi


read -ep "The default is to install on /dev/sda if you are choosing that method and not installing on lvm please answer yes:" -i "yes" tdisk
#answer for parting disk if dev/sda
if [[ $tdisk == "yes" ]] || [[ $tdisk == "y" ]]; then
echo " You get three options for installing on your disk"
sleep 1
echo "atomic- all files in one partition"
sleep 1
echo " home- separate /home partition"
sleep 1
echo " multi- separate /home, /var, and /tmp partitions"
sleep 1
echo " Please respond with atomic home or multi:"
sleep 1
read -ep "How would you like to partition the disk?" hdisk
fi
# do you want lvm?
if [[ $tdisk == "no" ]] || [[ $tdisk == "n" ]]; then
read -ep "Would you like to install this machine on an lvm:" -i "yes" clvm
fi
# download the ubunto iso
cd $tmp
if [[ ! -f $tmp/$download_file ]]; then
    echo -n " downloading $download_file: "
    download "$download_location$download_file"
fi
if [[ ! -f $tmp/$download_file ]]; then
	echo "Error: Failed to download ISO: $download_location$download_file"
	echo "This file may have moved or may no longer exist."
	echo
	echo "You can download it manually and move it to $tmp/$download_file"
	echo "Then run this script again."
	exit 1
fi

# download seed file
while true; do
    echo "What preseed file would you like to use?:"
    echo
    echo " [1] Suggested use jeff's preseed file"
    echo " [2] Choose your own preseed file"
    echo
    read -p " please enter your preference: [1|2]: " preseed
    case $preseed in
        [1]* )  seed_file="preseed.cfg"
		if [[ ! -f $tmp/$seed_file ]]; then
		echo -n " downloading $seed_file: "
		download "https://raw.githubusercontent.com/jeffrolinux/unattendedinstall/master/$seed_file"
		fi
                break;;
        [2]* )  read -p "Please give me the absolute path of the preseed file:" prep
		pre=$(basename $prep)
		seed_file=$pre
		if [[ ! -f $tmp/$seed_file ]]; then
                cp -r $prep $tmp
                fi
                break;;
        * ) echo " please answer [1] or [2]";;
    esac
done


# install required packages
echo " installing required packages"
if [ $(program_is_installed "mkpasswd") -eq 0 ] || [ $(program_is_installed "mkisofs") -eq 0 ]; then
    (apt-get -y update > /dev/null 2>&1) &
    spinner $!
    (apt-get -y install whois genisoimage > /dev/null 2>&1) &
    spinner $!
fi
if [[ $bootable == "yes" ]] || [[ $bootable == "y" ]]; then
    if [ $(program_is_installed "isohybrid") -eq 0 ]; then
        (apt-get -y install syslinux-utils > /dev/null 2>&1) & #depending on distro syslinux or syslinux-utils
        spinner $!
    fi
fi


# create working folders
echo " remastering your iso file"
mkdir -p $tmp
mkdir -p $tmp/iso_org
mkdir -p $tmp/iso_new

# mount the image
if grep -qs $tmp/iso_org /proc/mounts ; then
    echo " image is already mounted, continue"
else
    (mount -o loop $tmp/$download_file $tmp/iso_org > /dev/null 2>&1)
fi

# copy the iso contents to the working directory
(cp -rT $tmp/iso_org $tmp/iso_new > /dev/null 2>&1) &
spinner $!
echo "# D-I config version 2.0
# search path for the c32 support libraries (libcom32, libutil etc.)
LABEL Autoinstall
  menu label  Autoinstall
  kernel /install/vmlinuz
  append preseed/file=/cdrom/preseed.cfg debian-installer/locale=en_US keyboard-configuration/layoutcode=us console-setup/layoutcode=us languagechooser/language-name=English countrychooser/shortlist=US localechooser/supported-locales=en_US vga=788 initrd=/install/initrd.gz quiet -- auto=true priority=critical


path 
#include menu.cfg
#default vesamenu.c32
#prompt 0
timeout 10
ui gfxboot bootlogo
" > $tmp/iso_new/isolinux/isolinux.cfg
rm $tmp/iso_new/isolinux/txt.cfg

#You may have some syslinux boot issues due to file names, isolinux/syslinux move names may fix the errors
#mv $tmp/iso_new/isolinux/isolinux.cfg $tmp/iso_new/isolinux/syslinux.cfg
#mv $tmp/iso_new/isolinux mv $tmp/iso_new/syslinux
cd $tmp/iso_new
#might need this for older versions of linux
#echo en > $tmp/iso_new/isolinux/lang

# set late command example of downloading a file and making it executible
#late_command="chroot /target wget -O /home/$username/start.sh https://github.com/netson/ubuntu-unattended/raw/master/start.sh ;\
#    chroot /target chmod +x /home/$username/start.sh ;"

# copy the seed file
cp $tmp/$seed_file $tmp/iso_new/$seed_file
#cp -rT $tmp/$seed_file $tmp/iso_new/preseed/$seed_file

#installing applications
if [[ $inap == "yes" ]] || [[ $inap == "y" ]]; then
echo $apfl >> $tmp/iso_new/$seed_file
fi
#setting the the partitions to be set
if [[ $tdisk == "yes" ]] || [[ $tdisk == "y" ]]; then
sed -ie "s/patomic/$hdisk/g" $tmp/iso_new/$seed_file
fi
#changing the preseed to lvm
if [[ $clvm == "yes" ]] || [[ $clvm == "y" ]]; then
sed -ie "182 s/^/#/" $tmp/iso_new/$seed_file
sed -ie "188 s/^/#/" $tmp/iso_new/$seed_file
sed -i '190id-i partman/confirm_write_new_label boolean true' $tmp/iso_new/$seed_file
sed -i '191id-i partman/choose_partition select finish' $tmp/iso_new/$seed_file
sed -i '192id-i partman/confirm_nooverwrite boolean true' $tmp/iso_new/$seed_file
sed -i '193id-i partman/confirm boolean true' $tmp/iso_new/$seed_file
sed -i '194id-i partman-auto/purge_lvm_from_device boolean true' $tmp/iso_new/$seed_file 
sed -i '195id-i partman-lvm/device_remove_lvm boolean true' $tmp/iso_new/$seed_file 
sed -i '196id-i partman-lvm/confirm  boolean true' $tmp/iso_new/$seed_file 
sed -i '197id-i partman-lvm/confirm_nooverwrite boolean true' $tmp/iso_new/$seed_file 
sed -i '198id-i partman-auto-lvm/no_boot boolean true' $tmp/iso_new/$seed_file 
sed -i '199id-i partman-md/device_remove_md boolean true' $tmp/iso_new/$seed_file 
sed -i '200id-i partman-md/confirm boolean true' $tmp/iso_new/$seed_file 
sed -i '201id-i partman-md/confirm_nooverwrite boolean true' $tmp/iso_new/$seed_file 
sed -i '202id-i partman-auto/method string lvm' $tmp/iso_new/$seed_file
sed -i '203id-i partman-auto-lvm/guided_size string max' $tmp/iso_new/$seed_file 
sed -i '204id-i partman-partitioning/confirm_write_new_label boolean true' $tmp/iso_new/$seed_file 
fi
# include firstrun script # I personally chose not to use this I will run the commands I choose
#echo "
# setup firstrun script
#d-i preseed/late_command string $late_command" >> $tmp/iso_new/$seed_file
if [[ $dhcp == "yes" ]] || [[ $dhcp == "y" ]]; then
sed -i "s@#d-i netcfg/disable_autoconfig boolean true@d-i netcfg/disable_autoconfig boolean true@g" $tmp/iso_new/$seed_file
sed -i "s@#d-i netcfg/get_ipaddress string ipaddr@d-i netcfg/get_ipaddress string $ipaddr@g" $tmp/iso_new/$seed_file
sed -ie "s@#d-i netcfg/get_netmask string mask@d-i netcfg/get_netmask string $mask@g" $tmp/iso_new/$seed_file
sed -ie "s@#d-i netcfg/get_gateway string gateway@d-i netcfg/get_gateway string $gateway@g" $tmp/iso_new/$seed_file
sed -ie "s@#d-i netcfg/get_nameservers string dns@d-i netcfg/get_nameservers string $dns@g" $tmp/iso_new/$seed_file
sed -i "s@#d-i netcfg/confirm_static boolean true@d-i netcfg/confirm_static boolean true@g" $tmp/iso_new/$seed_file
fi
# generate the password hash not using this currently
upwhash=$(echo $upassword | mkpasswd -s -m sha-512)
#rootpwhash=$(echo $rpassword | mkpasswd -s -m sha-512)

# calculate checksum for seed file
#seed_checksum=$(md5sum $tmp/iso_new/$seed_file)

#my own sed begins example to follow sed -ie 's/few/asd/g' hello.txt
sed -ie "s/pusername/$username/g" $tmp/iso_new/$seed_file
sed -ie "s/phostname/$hostname/g" $tmp/iso_new/$seed_file
sed -ie "s@upwhash@$upwhash@g" $tmp/iso_new/$seed_file
sed -ie "s/pdomain/$domain/g" $tmp/iso_new/$seed_file 


echo " creating the remastered iso"
cd $tmp/iso_new
(mkisofs -D -r -V "Jeff's_UBUNTU" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $tmp/$new_iso_name . > /dev/null 2>&1) &
spinner $!

# make iso bootable (for dd'ing to  USB stick)
if [[ $bootable == "yes" ]] || [[ $bootable == "y" ]]; then
    isohybrid $tmp/$new_iso_name
fi

if [[ $usedd == "yes" ]] || [[ $usedd == "y" ]]; then
  echo " Creating your bootable disk with dd"
  (dd if=$tmp/$new_iso_name of=$disk bs=512k) &
  spinner $!
fi


# cleanup
umount $tmp/iso_org
rm -rf $tmp/iso_new
rm -rf $tmp/iso_org

# print info to user
echo " -----"
echo " finished remastering your ubuntu iso file"
echo " the new file is located at: $tmp/$new_iso_name"
echo " your username is: $username"
echo " your password is: $upassword"
echo " your root passwod is : $rpassword"
echo " your hostname is: $hostname"
echo " your timezone is: $timezone"
echo

# unset vars
unset username
unset upassword
unset upassword2
unset rpassword
unset rpassword2
unset hostname
unset timezone
unset pwhash
unset rootpwhash
unset download_file
unset download_location
unset new_iso_name
unset tmp
unset seed_file
unset tdisk
unset hdisk
